#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hm: hm {
        compatible = "zmk,behavior-hold-tap";
        label = "Home row mods";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <130>;
        quick-tap-ms = <130>;
        require-prior-idle-ms = <130>;
        flavor = "tap-preferred";
        hold-while-undecided-linger;
        hold-while-undecided;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        alt-shift-lang-switch {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <15 17 15 16 17 15 16 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&trans             &kp N1        &kp N2              &kp N3      &kp N4      &kp N5     &kp UP_ARROW     &kp N6   &kp N7           &kp N8           &kp N9               &kp N0           &trans
&kp RIGHT_BRACKET  &kp Q         &kp W               &kp E       &kp R       &kp T      &kp DOWN_ARROW   &kp Y    &kp U            &kp I            &kp O                &kp P            &kp LEFT_BRACKET
&trans             &hm LSHIFT A  &hm LEFT_CONTROL S  &hm LALT D  &hm LGUI F  &kp G      &kp LEFT_ARROW   &kp H    &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm RIGHT_CONTROL L  &hm RSHIFT SEMI  &kp APOS
&trans             &kp Z         &kp X               &kp C       &kp V       &kp B      &kp RIGHT_ARROW  &kp N    &kp M            &kp COMMA        &kp DOT              &kp FSLH         &trans
&kp C_MUTE         &trans        &trans              &mo 1       &kp SPACE   &kp ESC    &kp ENTER        &kp RET  &kp BSPC         &mo 2            &trans               &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        NAV {
            bindings = <
&trans  &trans           &trans      &trans            &trans      &trans    &trans  &trans    &trans      &trans     &trans     &trans  &trans
&trans  &kp DEL          &trans      &trans            &trans      &trans    &trans  &trans    &kp INSERT  &trans     &trans     &trans  &trans
&trans  &kp TAB          &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &trans    &trans  &kp LEFT  &kp DOWN    &kp UP     &kp RIGHT  &trans  &trans
&trans  &kp PRINTSCREEN  &trans      &trans            &trans      &trans    &trans  &kp HOME  &kp PG_UP   &kp PG_DN  &kp END    &trans  &trans
&trans  &trans           &trans      &trans            &trans      &trans    &trans  &trans    &trans      &mo 3      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        SYMBOL {
            bindings = <
&trans  &trans        &trans         &trans         &trans        &trans           &trans  &trans         &trans        &trans        &trans         &trans        &trans
&trans  &kp N1        &kp N2         &kp N3         &kp N4        &kp N5           &trans  &kp N6         &kp N7        &kp N8        &kp N9         &kp N0        &trans
&trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &trans  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp MINUS      &kp EQUAL     &trans
&trans  &kp GRAVE     &kp LS(TILDE)  &kp LS(LPAR)   &kp LS(RPAR)  &trans           &trans  &kp LS(PIPE)   &kp BSLH      &trans        &kp LS(UNDER)  &kp LS(PLUS)  &trans
&trans  &trans        &trans         &mo 3          &trans        &trans           &trans  &trans         &trans        &trans        &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        EXTRA {
            bindings = <
&trans  &trans  &trans   &trans   &trans   &trans    &to 4   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &trans  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &trans        &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans   &trans   &trans   &trans    &trans  &trans        &trans        &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        GAMING {
            bindings = <
&trans     &kp N1  &kp N2  &kp N3  &kp N4     &kp N5     &trans  &kp N6   &kp N7    &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E   &kp R      &kp T      &trans  &kp Y    &kp U     &kp I      &kp O    &kp P     &kp LBKT
&kp LSHFT  &kp A   &kp S   &kp F   &kp D      &kp G      &trans  &kp H    &kp J     &kp K      &kp L    &kp SEMI  &kp RSHFT
&kp LCTRL  &kp Z   &kp X   &kp C   &kp V      &kp B      &trans  &kp N    &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
&trans     &trans  &trans  &trans  &kp SPACE  &kp ESC    &trans  &kp RET  &kp BSPC  &trans     &trans   &to 0
            >;
        };
    };
};
